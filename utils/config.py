from yacs.config import CfgNode as CN
import yaml


# Default config
def get_cfg_defaults():
    cfg = CN()

    cfg.MODEL = CN()
    cfg.MODEL.NAME = ""
    cfg.MODEL.DEVICE_ID = "0"
    cfg.MODEL.IMG_BACKBONE_NAME = "ConvNet"
    cfg.MODEL.SEQ_BACKBONE_NAME = "Transformer"
    cfg.MODEL.WORD2VEC = ""
    cfg.MODEL.K = 1

    # DATASET
    cfg.DATASET = CN()
    cfg.DATASET.NAME = ""
    cfg.DATASET.TRAIN_PATH = ""
    cfg.DATASET.VAL_PATH = ""
    cfg.DATASET.TEST_PATH = ""
    cfg.DATASET.BASE_PATH = ""

    # TASK
    cfg.TASK = CN()
    cfg.TASK.N_WAY = 5
    cfg.TASK.N_SHOT = 10
    cfg.TASK.N_QUERY = 10
    cfg.TASK.NOISY_RATE = 0.0

    # RANDOM
    cfg.RANDOM = CN()
    cfg.RANDOM.SEED = 123

    # DATALOADER
    cfg.DATALOADER = CN()
    cfg.DATALOADER.BATCH_SIZE = 1
    cfg.DATALOADER.NUM_WORKERS = 0

    # TRAIN
    cfg.TRAIN = CN()
    cfg.TRAIN.WARMUP = 0
    cfg.TRAIN.EPOCH = 2000
    cfg.TRAIN.VAL_PER_EPOCH = 500
    cfg.TRAIN.VAL_TASK = 100
    cfg.TRAIN.TEST_TASK = 2000

    # SOLVER
    cfg.SOLVER = CN()
    cfg.SOLVER.OPTIMIZER = ""
    cfg.SOLVER.WEIGHT_DECAY = 0.01
    cfg.SOLVER.MAX_EPOCHS = 0
    cfg.SOLVER.BASE_LR = 0.01
    cfg.SOLVER.LOSS_FN = ''
    cfg.SOLVER.SCHEDULER_GAMMA = 0.3

    # CHECKPOINT
    cfg.CHECKPOINT = CN()
    cfg.CHECKPOINT.NAME = ""

    # LOGGING
    cfg.LOGGING = CN()
    cfg.LOGGING.BASE_DIR = ""
    cfg.LOGGING.TASK_NAME = ""
    cfg.LOGGING.MAX_MODEL = 5
    cfg.LOGGING.DESCRIBE = ""
    cfg.LOGGING.VERBOSE = True

    return cfg


# Load YAML File
def load_cfg_from_file(file_name):
    cfg = get_cfg_defaults()
    cfg.merge_from_file(file_name)
    return cfg


# def check_cfg(cfg):
#     ns, nq = cfg.TASK.N_SHOT, cfg.TASK.N_QUERY
#     assert ns + nq == 20, "n_shot + n_query must be 20"


def load_cfg():
    import argparse
    arg_parser = argparse.ArgumentParser()

    arg_parser.add_argument('--config_file', type=str, help='config file path',
                            default='./configs/templete.yaml')  # TODO
    arg_parser.add_argument('--device', type=str, help='gpu id', default="")
    arg_parser.add_argument('--model', type=str, help='model', default="ProtoNet")
    arg_parser.add_argument('--val_epoch', type=int, help='val_epoch', default=500)
    arg_parser.add_argument('--epoch', type=int, help='val_epoch', default=50000)
    arg_parser.add_argument('--pretrain', type=str, help='pretrain_model', default='')
    arg_parser.add_argument('--lr', type=float, help='learning rate', default=0.001)
    arg_parser.add_argument('--test_epoch', type=int, help='test_epoch rate', default=5000)
    arg_parser.add_argument("--gamma", type=float, help="scheduler gamma", default=1.)
    arg_parser.add_argument("--val_per_epoch", type=int, help="val_per_epoch", default=500)
    arg_parser.add_argument("--way", type=int, help="task classes", default=5)
    arg_parser.add_argument("--shot", type=int, help="task shots", default=5)
    arg_parser.add_argument("--knn", type=int, help="knn k", default=1)
    arg_parser.add_argument("--seed", type=int, help="random seed", default=123)

    args = arg_parser.parse_args()
    config_file = args.config_file
    pretrain = args.pretrain
    device = args.device
    cfg = load_cfg_from_file(config_file)
    cfg.TASK.N_WAY = args.way
    cfg.TASK.N_SHOT = args.shot
    cfg.TASK.N_QUERY = 20 - cfg.TASK.N_SHOT
    cfg.MODEL.K = args.knn
    cfg.RANDOM.SEED = args.seed

    if device:
        cfg.MODEL.DEVICE_ID = device

    cfg.TRAIN.TEST_TASK = args.test_epoch
    cfg.CHECKPOINT.NAME = pretrain
    cfg.SOLVER.BASE_LR = args.lr

    cfg.MODEL.NAME = args.model
    cfg.TRAIN.EPOCH = args.epoch

    cfg.TRAIN.VAL_TASK = args.val_epoch
    cfg.TRAIN.VAL_PER_EPOCH = args.val_per_epoch
    
    """
    LargePE Dataset  # 100: 58: 50
    """
    
    return cfg


def get_task_param(cfg: CN):
    task = {'way': cfg.TASK.N_WAY, 'shot': cfg.TASK.N_SHOT, 'query': cfg.TASK.N_QUERY, 'noisy': cfg.TASK.NOISY_RATE}
    return task

